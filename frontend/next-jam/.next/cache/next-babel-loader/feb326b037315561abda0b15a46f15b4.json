{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport siteMap from \"~/site/site-map\";\nimport matter from \"gray-matter\";\nexport const getFrontmatterDataByTypeAndId = async (type, id) => {\n  if (!id || !type) return;\n  const content = await import(`~/site/data/${type}/${id}/index.md`);\n  const data = matter(content.default);\n  return {\n    content: data.content,\n    data: data.data\n  };\n};\nexport const getFrontmatterById = async id => {\n  if (!id) return;\n  const page = siteMap[id];\n  const content = await import(`~/site/content${page === null || page === void 0 ? void 0 : page.url}index.md`);\n  const data = matter(content.default);\n  return {\n    content: data.content,\n    data: data.data\n  };\n};\nexport const getFrontmatterByContext = async context => {\n  const {\n    asPath,\n    req\n  } = context;\n  const pathToMarkdown = `${(req === null || req === void 0 ? void 0 : req.url) ? `${req === null || req === void 0 ? void 0 : req.url}` : `${asPath}`}`;\n  const content = await import(`~/site/content${pathToMarkdown}index.md`);\n  const frontmatter = matter(content.default);\n  return _objectSpread({}, frontmatter.data);\n};","map":null,"metadata":{},"sourceType":"module"}